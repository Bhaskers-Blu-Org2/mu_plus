#Use matrix to speed up the build process
strategy:
  matrix:
    TARGET_DFCI:
      Build.Pkgs: 'DfciPkg ZeroTouchPkg XmlSupportPkg'
    TARGET_OTHER1:
      Build.Pkgs: 'MsGraphicsPkg UefiTestingPkg PcBdsPkg'
    TARGET_OTHER2:
      Build.Pkgs: 'MsCorePkg MsWheaPkg'

variables:
  GCC5_ARM_PREFIX: $(build.sourcesDirectory)/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
  GCC5_AARCH64_PREFIX: $(build.sourcesDirectory)/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-

workspace:
  clean: all

steps:
- checkout: self
  clean: true
  fetchDepth: 10
  submodules: recursive

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.7.x'
    architecture: 'x64'

# TODO: determine if we no longer need these because of recent basecore changes?

- script: wget https://releases.linaro.org/components/toolchain/binaries/7.2-2017.11/aarch64-linux-gnu/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz
  displayName: Downloading gcc-linaro-7.2.1-2017.11-x86_64_aarch64

- script: tar -xf gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/
  displayName: Unpacking gcc-linaro-7.2.1-2017.11-x86_64_aarch64

- script: wget https://releases.linaro.org/components/toolchain/binaries/6.4-2017.11/arm-linux-gnueabihf/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz
  displayName: Downloading gcc-linaro-6.4.1-2017.11-x86_64_arm

- script: tar -xf gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz
  displayName: Unpacking gcc-linaro-6.4.1-2017.11-x86_64_arm

- script: pip3 install -r requirements.txt --upgrade
  displayName: 'Install/Upgrade mu_build'

#Build repo
- task: CmdLine@1
  displayName: Setup $(Build.Pkgs)
  inputs:
    filename: stuart_ci_setup
    arguments: -c CISettings.py --force-git

- task: CmdLine@1
  displayName: Update $(Build.Pkgs)
  inputs:
    filename: stuart_update
    arguments: -c CISettings.py --Tool_Chain GCC5

- task: CmdLine@1
  displayName: Build and Test $(Build.Pkgs)
  inputs:
    filename: stuart_ci_build
    arguments: -c CISettings.py --Tool_Chain GCC5 -p $(Build.Pkgs)

# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2
  displayName: 'Publish junit test results'
  continueOnError: true
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: 'Build/TestSuites.xml'
    testRunTitle: "Basecore"
    #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
    mergeTestResults: true # Optional
    #testRunTitle: # Optional
    #buildPlatform: # Optional
    #buildConfiguration: # Optional
    publishRunAttachments: true # Optional

# Copy the build logs to the artifact staging directory
- task: CopyFiles@2
  displayName: "Copy build logs"
  continueOnError: true
  condition: succeededOrFailed()
  inputs:
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    contents: |
      Build/**/BUILDLOG_*.txt
      Build/**/BUILDLOG_*.md
      Build/**/CI_*.txt
      Build/**/CI_*.md
      Build/**/CISETUP.txt
      Build/**/CISETUP.md
      Build/**/*LOG.txt
      Build/**/*LOG.md
      Build/**/TestSuites.xml
    flattenFolders: true

# Publish build artifacts to Azure Artifacts/TFS or a file share
- task: PublishBuildArtifacts@1
  displayName: "Publish build logs"
  continueOnError: true
  condition: succeededOrFailed()
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'Build Logs $(Build.Pkgs)'
